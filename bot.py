import os
import json
import google.generativeai as genai
import schedule
import threading
import time
import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# === üîê –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ GEMINI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini ===
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# === –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ===
DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ Gemini ===
async def generate_message(prompt):
    try:
        response = await asyncio.to_thread(model.generate_content, prompt)
        return response.text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ===
async def delayed_send_reminder(chat_id, task, delay):
    await asyncio.sleep(delay)
    try:
        await bot.send_message(chat_id=chat_id, text=f"‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç: {task}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===
def schedule_task(chat_id, time_str, task):
    try:
        task_time = datetime.strptime(time_str, "%H:%M") - timedelta(minutes=10)
        now = datetime.now()
        scheduled_time = now.replace(hour=task_time.hour, minute=task_time.minute, second=0, microsecond=0)
        if scheduled_time < now:
            scheduled_time += timedelta(days=1)

        delay = (scheduled_time - now).total_seconds()
        asyncio.run_coroutine_threadsafe(delayed_send_reminder(chat_id, task, delay), loop)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞ Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤ ===
async def send_long_message(chat_id, text):
    MAX_LEN = 4096
    for i in range(0, len(text), MAX_LEN):
        await bot.send_message(chat_id=chat_id, text=text[i:i+MAX_LEN])

# === –£—Ç—Ä–æ ===
async def morning_routine():
    data = load_data()
    for chat_id in data:
        motivation = await generate_message("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞.")
        await send_long_message(chat_id, f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{motivation}\n\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?")
        data[chat_id]["mode"] = "plan"
    save_data(data)

# === –í–µ—á–µ—Ä ===
async def evening_routine():
    data = load_data()
    for chat_id in data:
        await bot.send_message(chat_id=chat_id, text="üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å?")
        data[chat_id]["mode"] = "reflect"
    save_data(data)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ ===
def run_schedule(loop):
    schedule.every().day.at("16:30").do(lambda: asyncio.run_coroutine_threadsafe(morning_routine(), loop))
    schedule.every().day.at("20:00").do(lambda: asyncio.run_coroutine_threadsafe(evening_routine(), loop))
    while True:
        schedule.run_pending()
        time.sleep(1)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    text = update.message.text
    data = load_data()

    if chat_id not in data:
        data[chat_id] = {"diary": [], "mode": None, "tasks": []}

    mode = data[chat_id].get("mode")

    if mode == "plan":
        data[chat_id]["diary"].append({"type": "–ø–ª–∞–Ω—ã", "text": text})
        ai_reply = await generate_message(f"–í–æ—Ç –ø–ª–∞–Ω —à–∫–æ–ª—å–Ω–∏–∫–∞: {text}\n–î–∞–π —Å–æ–≤–µ—Ç—ã –∏ –¥–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—É–Ω–∫—Ç—ã.")
        await send_long_message(chat_id, f"‚úÖ –ü–ª–∞–Ω –∑–∞–ø–∏—Å–∞–Ω –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω –ò–ò:\n\n{ai_reply}\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n8:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n9:30 –ü—Ä–æ–≥—É–ª–∫–∞\n...")
        data[chat_id]["mode"] = "schedule"

    elif mode == "schedule":
        lines = text.strip().split("\n")
        tasks = []
        for line in lines:
            try:
                time_part, task_part = line.split(" ", 1)
                datetime.strptime(time_part, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                tasks.append((time_part, task_part))
                schedule_task(chat_id, time_part, task_part)
            except ValueError:
                await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: '{line}'. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç 'HH:MM –ó–∞–¥–∞–Ω–∏–µ'")
                return
        data[chat_id]["tasks"] = tasks
        data[chat_id]["mode"] = None
        await bot.send_message(chat_id=chat_id, text="‚úÖ –ó–∞–¥–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–ø–∏—Å–∞–Ω—ã. –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!")

    elif mode == "reflect":
        data[chat_id]["diary"].append({"type": "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è", "text": text})
        reply = await generate_message(f"–í–æ—Ç –¥–Ω–µ–≤–Ω–∏–∫–æ–≤–∞—è –∑–∞–ø–∏—Å—å —à–∫–æ–ª—å–Ω–∏–∫–∞: '{text}'. –û—Ç–≤–µ—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ —Å–æ–≤–µ—Ç–æ–º.")
        await send_long_message(chat_id, f"üí¨ {reply}")
        data[chat_id]["mode"] = None

    else:
        # –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
        response = await generate_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: {text}")
        await send_long_message(chat_id, response)

    save_data(data)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    data = load_data()
    if chat_id not in data:
        data[chat_id] = {"diary": [], "mode": None, "tasks": []}
        save_data(data)
    await bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–¥–Ω–µ–≤–Ω–∏–∫ ü§ñ. –£—Ç—Ä–æ–º —è —Å–ø—Ä–æ—à—É —Ç–≤–æ–π –ø–ª–∞–Ω, –ø–æ–º–æ–≥—É –µ–≥–æ —É–ª—É—á—à–∏—Ç—å, –∑–∞–ø–∏—à—É —à–∞–≥–∏ –∏ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∏—Ö. –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.")

# === –ó–∞–ø—É—Å–∫ ===
bot = Bot(token=TELEGRAM_TOKEN)
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    threading.Thread(target=run_schedule, args=(loop,), daemon=True).start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
